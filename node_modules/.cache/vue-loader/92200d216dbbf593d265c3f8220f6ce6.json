{"remainingRequest":"/media/naved888/Naved/projects/image-edit-bootcamp/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/naved888/Naved/projects/image-edit-bootcamp/node_modules/vue-media-recorder/src/components/VideoCapture.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/naved888/Naved/projects/image-edit-bootcamp/node_modules/vue-media-recorder/src/components/VideoCapture.vue","mtime":499162500000},{"path":"/media/naved888/Naved/projects/image-edit-bootcamp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/naved888/Naved/projects/image-edit-bootcamp/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/media/naved888/Naved/projects/image-edit-bootcamp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/naved888/Naved/projects/image-edit-bootcamp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBMb2FkZXIgZnJvbSAnLi9Mb2FkZXIudnVlJwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIlZpZGVvQ2FwdHVyZSIsCiAgcHJvcHM6IHsKICAgIHVwbG9hZFVybDogewogICAgICBkZWZhdWx0OiBudWxsCiAgICB9LAogICAgcmVjb3JkQnRuQ29udGVudDogewogICAgICBkZWZhdWx0OiAnUmVjb3JkJwogICAgfSwKICAgIHN0b3BCdG5Db250ZW50OiB7CiAgICAgIGRlZmF1bHQ6ICfil7wnCiAgICB9LAogICAgY2FuY2VsQnRuQ29udGVudDogewogICAgICBkZWZhdWx0OiAnQ2FuY2VsJwogICAgfSwKICAgIGRvbmVCdG5Db250ZW50OiB7CiAgICAgIGRlZmF1bHQ6ICdPSycKICAgIH0KICB9LAogIGNvbXBvbmVudHM6IHsKICAgIExvYWRlcgogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGVyclRleHQ6IG51bGwsCiAgICAgIGlzVmFsaWQ6IHRydWUsCiAgICAgIGlzVXBsb2FkaW5nOiBmYWxzZSwKICAgICAgaXNSZWNvcmRpbmc6IGZhbHNlLCAvLyByZWNvcmRpbmcgbW9kZSBpZGVudGlmaWVyCiAgICAgIGlzRmluaXNoZWQ6IGZhbHNlLCAvLyBmaW5pc2hlZCByZWNvcmRpbmcgLSBhY3Rpb24gYnV0dG9ucyBpbmRpY2F0b3IKICAgICAgcmVjb3JkZXI6IG51bGwsIC8vIGNvbXBvbmVudCB3aWRlIE1lZGlhUmVjb3JkZXIKICAgICAgY29ubmVjdGlvbjogbnVsbCwgLy8gY29tcG9uZW50IHdpZGUgV2ViU29ja2V0CiAgICAgIHZpZGVvVXJsOiBudWxsIC8vIGxpbmsgdG8gdmlkZW8gLSBhc3NpZ25lZCB3aGVuIGRvbmUgd3JpdGluZyB2aWRlbyBmaWxlCiAgICB9OwogIH0sCiAgY3JlYXRlZCgpIHsKICAgIGlmICghdGhpcy51cGxvYWRVcmwpIHRoaXMuZXJyVGV4dCA9ICdUaGVyZSBpcyBubyB1cGxvYWQgdXJsIGF2YWlsYWJsZScKICAgIHRoaXMuZ2V0V2ViU29ja2V0KCk7IC8vIGluaXRpYWxpemUgY29ubmVjdGlvbiB0byBXZWJTb2NrZXQKICB9LAogIG1vdW50ZWQoKSB7CiAgICB0aGlzLnJlc2V0VmlkZW8oKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIC8vIHJlc2V0IHZpZGVvIGRpc3BsYXkgd2l0aCBtZWRpYSBkZXZpY2UgbWVkaWEgc3RyZWFtCiAgICByZXNldFZpZGVvKCkgewogICAgICB0aGlzLmlzRmluaXNoZWQgPSBmYWxzZTsKICAgICAgdGhpcy5pc1JlY29yZGluZyA9IGZhbHNlOwogICAgICB0aGlzLmlzTG9hZGluZyA9IHRydWU7CiAgICAgIHRoaXMuJHJlZnMudmlkZW9SZWMubXV0ZWQgPSB0cnVlOwogICAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzCiAgICAgICAgLmdldFVzZXJNZWRpYSh7CiAgICAgICAgICB2aWRlbzogewogICAgICAgICAgICB3aWR0aDogeyBpZGVhbDogMTI4MCB9LAogICAgICAgICAgICBoZWlnaHQ6IHsgaWRlYWw6IDcyMCB9CiAgICAgICAgICB9LAogICAgICAgICAgYXVkaW86IHRydWUKICAgICAgICB9KQogICAgICAgIC50aGVuKHRoaXMuZ290U3RyZWFtKQogICAgICAgIC5jYXRjaCgoKSA9PiAodGhpcy5pc1ZhbGlkID0gZmFsc2UpKTsKICAgIH0sCiAgICAvLyBzdGFydCByZWNvb3JkaW5nCiAgICByZWNvcmQoKSB7CiAgICAgIGlmICghdGhpcy51cGxvYWRVcmwpIHJldHVybjsKICAgICAgdGhpcy5yZWNvcmRlci5zdGFydCgpOwogICAgICB0aGlzLmlzUmVjb3JkaW5nID0gdHJ1ZTsKICAgIH0sCiAgICAvLyBzdG9wIHJlY29yZGluZwogICAgc3RvcCgpIHsKICAgICAgdGhpcy5yZWNvcmRlci5zdG9wKCkKICAgICAgdGhpcy5pc1JlY29yZGluZyA9IGZhbHNlOwogICAgICB0aGlzLmlzRmluaXNoZWQgPSB0cnVlOwogICAgICB0aGlzLmNvbm5lY3Rpb24uc2VuZCgiRE9ORSIpCiAgICB9LAogICAgLy8gcmVzZXQgdmlkZW8gZGlhcGx5IGFuZCBlbWl0IHZpZGVvIGZpbGUgdXJsCiAgICBkb25lKCkgewogICAgICB0aGlzLnJlc2V0VmlkZW8oKTsKICAgICAgdGhpcy4kZW1pdCgiaW5wdXQiLCB0aGlzLnZpZGVvVXJsKTsKICAgIH0sCiAgICAvLyBpbml0aWFsaXplIE1lZGlhUmVjb3JkZXIgYW5kIHZpZGVvIGVsZW1lbnQgc291cmNlCiAgICBnb3RTdHJlYW0obWVkaWFTdHJlYW0pIHsKICAgICAgdGhpcy5yZWNvcmRlciA9IG5ldyBNZWRpYVJlY29yZGVyKG1lZGlhU3RyZWFtLCB7CiAgICAgICAgbWltZVR5cGU6ICJ2aWRlby93ZWJtIiwKICAgICAgICBhdWRpb0JpdHNQZXJTZWNvbmQ6IDEyODAwMAogICAgICB9KTsKICAgICAgdGhpcy5yZWNvcmRlci5vbmRhdGFhdmFpbGFibGUgPSB0aGlzLnZpZGVvRGF0YUhhbmRsZXI7CiAgICAgIHRoaXMuJHJlZnMudmlkZW9SZWMuc3JjID0gbnVsbDsKICAgICAgdGhpcy4kcmVmcy52aWRlb1JlYy5zcmNPYmplY3QgPSBtZWRpYVN0cmVhbTsKICAgICAgdGhpcy50b2dnbGVWaWRlbygpOwogICAgfSwKICAgIC8vIGhhbmRsZSBzZW5kaW5nIGRhdGEgZm9yIHdyaXRpbmcgdXNpbmcgdGhlIGdpdmVuIFdlYlNvY2tldAogICAgdmlkZW9EYXRhSGFuZGxlcihldmVudCkgewogICAgICB0aGlzLmlzVXBsb2FkaW5nID0gdHJ1ZTsKICAgICAgbGV0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihldmVudC5kYXRhKTsKICAgICAgcmVhZGVyLm9ubG9hZGVuZCA9ICgpID0+IHsKICAgICAgICB0aGlzLmNvbm5lY3Rpb24uc2VuZChyZWFkZXIucmVzdWx0KTsKICAgICAgfTsKICAgIH0sCiAgICAvLyBpbml0aWFsaXplIFdlYlNvY2tldAogICAgZ2V0V2ViU29ja2V0KCkgewogICAgICBjb25zdCB3ZWJzb2NrZXRFbmRwb2ludCA9ICJ3c3M6Ly9taXN0ZXItcmVjb3JkZXIuaGVyb2t1YXBwLmNvbSI7CiAgICAgIC8vIGNvbnN0IHdlYnNvY2tldEVuZHBvaW50ID0gIndzOi8vbG9jYWxob3N0OjMwMDAiOwogICAgICB0aGlzLmNvbm5lY3Rpb24gPSBuZXcgV2ViU29ja2V0KHdlYnNvY2tldEVuZHBvaW50KTsKICAgICAgLy8gY29uc29sZS5sb2coJ2Nvbm5lY3Rpb24nLCB0aGlzLmNvbm5lY3Rpb24pCiAgICAgIHRoaXMuY29ubmVjdGlvbi5iaW5hcnlUeXBlID0gImFycmF5YnVmZmVyIjsKICAgICAgdGhpcy5jb25uZWN0aW9uLm9ubWVzc2FnZSA9IG1lc3NhZ2UgPT4gewogICAgICAgIC8vIGNvbnNvbGUubG9nKCdkYXRhIGF2YWlsYWJsZScpCiAgICAgICAgdGhpcy51cGRhdGVWaWRlb0ZpbGUobWVzc2FnZS5kYXRhKTsKICAgICAgICB0aGlzLiRyZWZzLnZpZGVvUmVjLm11dGVkID0gZmFsc2U7CiAgICAgIH07CiAgICB9LAogICAgLy8gdXBkYXRlIHZpZGVvIHdoZW4gZmlsZSB3cml0dGVuCiAgICB1cGRhdGVWaWRlb0ZpbGUoZmlsZU5hbWUpIHsKICAgICAgdGhpcy52aWRlb1VybCA9IHRoaXMudXBsb2FkVXJsICsgZmlsZU5hbWUgKyAiLndlYm0iOwogICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnZpZGVvVXJsKQogICAgICB0aGlzLnRvZ2dsZVZpZGVvKCk7CiAgICAgIHRoaXMuJHJlZnMudmlkZW9SZWMuc3JjT2JqZWN0ID0gbnVsbDsKICAgICAgdGhpcy4kcmVmcy52aWRlb1JlYy5zcmMgPSB0aGlzLnZpZGVvVXJsOwogICAgICB0aGlzLmlzVXBsb2FkaW5nID0gZmFsc2U7CiAgICB9LAogICAgLy8gdG9nZ2xlIHZpZGVvIGRpc3BsYXkKICAgIHRvZ2dsZVZpZGVvKCkgewogICAgICB0aGlzLiRyZWZzLnZpZGVvUmVjLmxvb3AgPSAhdGhpcy4kcmVmcy52aWRlb1JlYy5sb29wOwogICAgICB0aGlzLiRyZWZzLnZpZGVvUmVjLmNvbnRyb2xzID0gIXRoaXMuJHJlZnMudmlkZW9SZWMuY29udHJvbHM7CiAgICB9CiAgfQp9Owo="},{"version":3,"sources":["VideoCapture.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAufile":"VideoCapture.vue","sourceRoot":"node_modules/vue-media-recorder/src/components","sourcesContent":["<template>\n  <section v-if=\"isValid\">\n    <section class=\"video-cap-container\">\n      <div v-show=\"!isUploading\" class=\"stream-container\">\n        <video ref=\"videoRec\" class=\"camera\" muted loop controls autoplay />\n        <template v-if=\"!isFinished\">\n          <button v-if=\"!isRecording\" @click=\"record\" class=\"btn flex-center\">{{recordBtnContent}}</button>\n          <button v-else @click=\"stop\" class=\"btn\">\n            <span style=\"font-size:3em;\">{{stopBtnContent}}</span>\n          </button>\n        </template>\n      </div>\n      <Loader v-show=\"isUploading\" />\n      <div class=\"controls\" v-if=\"isFinished && !isUploading && uploadUrl\">\n        <button type=\"button\" class=\"btn\" @click.prevent=\"resetVideo\">{{cancelBtnContent}}</button>\n        <button type=\"button\" class=\"btn\" @click.prevent=\"done\">{{doneBtnContent}}</button>\n      </div>\n      <h1 class=\"error-video\">{{errText}}</h1>\n    </section>\n  </section>\n</template>\n\n<script>\nimport Loader from './Loader.vue'\nexport default {\n  name: \"VideoCapture\",\n  props: {\n    uploadUrl: {\n      default: null\n    },\n    recordBtnContent: {\n      default: 'Record'\n    },\n    stopBtnContent: {\n      default: 'â—¼'\n    },\n    cancelBtnContent: {\n      default: 'Cancel'\n    },\n    doneBtnContent: {\n      default: 'OK'\n    }\n  },\n  components: {\n    Loader\n  },\n  data() {\n    return {\n      errText: null,\n      isValid: true,\n      isUploading: false,\n      isRecording: false, // recording mode identifier\n      isFinished: false, // finished recording - action buttons indicator\n      recorder: null, // component wide MediaRecorder\n      connection: null, // component wide WebSocket\n      videoUrl: null // link to video - assigned when done writing video file\n    };\n  },\n  created() {\n    if (!this.uploadUrl) this.errText = 'There is no upload url available'\n    this.getWebSocket(); // initialize connection to WebSocket\n  },\n  mounted() {\n    this.resetVideo();\n  },\n  methods: {\n    // reset video display with media device media stream\n    resetVideo() {\n      this.isFinished = false;\n      this.isRecording = false;\n      this.isLoading = true;\n      this.$refs.videoRec.muted = true;\n      navigator.mediaDevices\n        .getUserMedia({\n          video: {\n            width: { ideal: 1280 },\n            height: { ideal: 720 }\n          },\n          audio: true\n        })\n        .then(this.gotStream)\n        .catch(() => (this.isValid = false));\n    },\n    // start recoording\n    record() {\n      if (!this.uploadUrl) return;\n      this.recorder.start();\n      this.isRecording = true;\n    },\n    // stop recording\n    stop() {\n      this.recorder.stop()\n      this.isRecording = false;\n      this.isFinished = true;\n      this.connection.send(\"DONE\")\n    },\n    // reset video diaply and emit video file url\n    done() {\n      this.resetVideo();\n      this.$emit(\"input\", this.videoUrl);\n    },\n    // initialize MediaRecorder and video element source\n    gotStream(mediaStream) {\n      this.recorder = new MediaRecorder(mediaStream, {\n        mimeType: \"video/webm\",\n        audioBitsPerSecond: 128000\n      });\n      this.recorder.ondataavailable = this.videoDataHandler;\n      this.$refs.videoRec.src = null;\n      this.$refs.videoRec.srcObject = mediaStream;\n      this.toggleVideo();\n    },\n    // handle sending data for writing using the given WebSocket\n    videoDataHandler(event) {\n      this.isUploading = true;\n      let reader = new FileReader();\n      reader.readAsArrayBuffer(event.data);\n      reader.onloadend = () => {\n        this.connection.send(reader.result);\n      };\n    },\n    // initialize WebSocket\n    getWebSocket() {\n      const websocketEndpoint = \"wss://mister-recorder.herokuapp.com\";\n      // const websocketEndpoint = \"ws://localhost:3000\";\n      this.connection = new WebSocket(websocketEndpoint);\n      // console.log('connection', this.connection)\n      this.connection.binaryType = \"arraybuffer\";\n      this.connection.onmessage = message => {\n        // console.log('data available')\n        this.updateVideoFile(message.data);\n        this.$refs.videoRec.muted = false;\n      };\n    },\n    // update video when file written\n    updateVideoFile(fileName) {\n      this.videoUrl = this.uploadUrl + fileName + \".webm\";\n      // console.log(this.videoUrl)\n      this.toggleVideo();\n      this.$refs.videoRec.srcObject = null;\n      this.$refs.videoRec.src = this.videoUrl;\n      this.isUploading = false;\n    },\n    // toggle video display\n    toggleVideo() {\n      this.$refs.videoRec.loop = !this.$refs.videoRec.loop;\n      this.$refs.videoRec.controls = !this.$refs.videoRec.controls;\n    }\n  }\n};\n</script>\n\n"]}]}